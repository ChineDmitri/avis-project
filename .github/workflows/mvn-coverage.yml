name: Maven Tests & Code Coverage

on:
  push:
    branches: [main, master, develop 'feature/*', 'feature_*']
  pull_request:
    branches: [main, master, develop]

jobs:
  test:
    name: Run Tests with Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"
          cache: maven
      
      # V√©rifier la structure du projet
      - name: Check project structure
        run: ls -la

      # Ex√©cuter le build et les tests avec g√©n√©ration du rapport de couverture
      - name: Run tests with coverage
        run: mvn clean verify
      
      # V√©rifier que le rapport de couverture existe
      - name: Check coverage reports
        run: |
          echo "Checking coverage report location..."
          ls -la avis-coverage/target/site/jacoco-aggregate/ || echo "Rapport non trouv√© √† cet emplacement"

      # Publier le rapport JaCoCo comme artefact
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: avis-coverage/target/site/jacoco-aggregate/
          retention-days: 7
      
      # Publier les rapports de tests JUnit
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: junit-test-results
          path: "**/target/surefire-reports/*.xml"
          retention-days: 7

      # Optionnel: publier le rapport de couverture comme page GitHub
      - name: Publish Coverage Report to GitHub Pages
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: avis-coverage/target/site/jacoco-aggregate
          branch: gh-pages
          target-folder: coverage-report

      # Optionnel: v√©rifier les seuils de couverture et √©chouer si non respect√©s
      # - name: Verify coverage thresholds
      #   run: |
      #     INSTRUCTION_COVERAGE=$(grep -A 1 "Total.*instruction" avis-coverage/target/site/jacoco-aggregate/index.html | tail -n 1 | grep -o '[0-9]\+%' | grep -o '[0-9]\+')
      #     BRANCH_COVERAGE=$(grep -A 1 "Total.*branch" avis-coverage/target/site/jacoco-aggregate/index.html | tail -n 1 | grep -o '[0-9]\+%' | grep -o '[0-9]\+')
          
      #     echo "Instruction coverage: $INSTRUCTION_COVERAGE%"
      #     echo "Branch coverage: $BRANCH_COVERAGE%"
          
      #     # Seuils configurables (modifier selon vos besoins)
      #     MIN_INSTRUCTION_COVERAGE=20
      #     MIN_BRANCH_COVERAGE=20
          
      #     if [ "$INSTRUCTION_COVERAGE" -lt "$MIN_INSTRUCTION_COVERAGE" ]; then
      #       echo "‚ùå Instruction coverage below threshold: $INSTRUCTION_COVERAGE% < $MIN_INSTRUCTION_COVERAGE%"
      #       exit 1
      #     fi
          
      #     if [ "$BRANCH_COVERAGE" -lt "$MIN_BRANCH_COVERAGE" ]; then
      #       echo "‚ùå Branch coverage below threshold: $BRANCH_COVERAGE% < $MIN_BRANCH_COVERAGE%"
      #       exit 1
      #     fi
          
      #     echo "‚úÖ Coverage thresholds met!"

      # # Pour afficher un r√©sum√© des r√©sultats dans GitHub
      # - name: Coverage Summary
      #   run: |
      #     echo "## üìä Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
      #     echo "" >> $GITHUB_STEP_SUMMARY
      #     echo "| Type | Coverage |" >> $GITHUB_STEP_SUMMARY
      #     echo "| ---- | -------- |" >> $GITHUB_STEP_SUMMARY
      #     INSTRUCTION=$(grep -A 1 "Total.*instruction" avis-coverage/target/site/jacoco-aggregate/index.html | tail -n 1 | grep -o '[0-9]\+%')
      #     BRANCH=$(grep -A 1 "Total.*branch" avis-coverage/target/site/jacoco-aggregate/index.html | tail -n 1 | grep -o '[0-9]\+%')
      #     echo "| Instructions | $INSTRUCTION |" >> $GITHUB_STEP_SUMMARY
      #     echo "| Branches | $BRANCH |" >> $GITHUB_STEP_SUMMARY
      #     echo "" >> $GITHUB_STEP_SUMMARY
      #     echo "Detailed report available as workflow artifact." >> $GITHUB_STEP_SUMMARY